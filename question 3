#include <pthread.h>
#include <semaphore.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>

// An resource semaphore represents items on the table
sem_t resource_ready;

// Each student semaphore represents when a student has the items they need
sem_t student_semaphors[3];

// This is an array of strings describing what each student type needs
char* student_types[3] = { "question_paper & pen", "question_paper & paper", "pen & paper" };

// This list represents item types that are on the table. This should corrispond
// with the student_types, such that each item is the one the student has. So the
// first item would be paper, then pen, then question_paper.
bool items_on_table[3] = { false, false, false };

// Each teacher pushes a certian type item, manage these with this semaphore
sem_t teacher_semaphores[3];

/**
* student function, handles waiting for the item’s that they need, and then
* assignment. Repeat this three times
*/
void* student(void* arg)
{
int student_id = *(int*) arg;
int type_id = student_id % 3;

// Smoke 3 times
for (int i = 0; i < 3; ++i)
{
printf("student %d Waiting for %s\n",student_id, student_types[type_id]);

// Wait for the proper combination of items to be on the table
sem_wait(&student_semaphors[type_id]);

// Make the assignment before releasing the resource
printf("\student %d Now making the a assignment\n", student_id);
usleep(rand() % 50000);
sem_post(&resource_ready);

// We’re assignment now
printf("student %d Now assignment\n", student_id);
usleep(rand() % 50000);
}

return NULL;
}

// This semaphore gives the teacher exclusive access to the items on the table
sem_t teacher_lock;

/**
* The teacher is responsible for releasing the proper student semaphore when the
* right item’s are on the table.
*/
void* teacher(void* arg)
{
int teacher_id = *(int*) arg;

for (int i = 0; i < 3; ++i)
{
// Wait for this teacher to be needed
sem_wait(&teacher_semaphores[teacher_id]);
sem_wait(&teacher_lock);

// Check if the other item we need is on the table
if (items_on_table[(teacher_id + 1) % 3])
{
items_on_table[(teacher_id + 1) % 3] = false;
sem_post(&student_semaphors[(teacher_id + 2) % 3]);
}
else if (items_on_table[(teacher_id + 2) % 3])
{
items_on_table[(teacher_id + 2) % 3] = false;
sem_post(&student_semaphors[(teacher_id + 1) % 3]);
}
else
{
// The other item’s aren’t on the table yet
items_on_table[teacher_id] = true;
}

sem_post(&teacher_lock);
}

return NULL;
}

/**
* The resource puts items on the table
*/
void* resource(void* arg)
{
int resource_id = *(int*) arg;

for (int i = 0; i < 3; ++i)
{
usleep(rand() % 200000);

// Wait for a lock on the resource
sem_wait(&resource_ready);

// Release the items this resource gives out
sem_post(&teacher_semaphores[resource_id]);
sem_post(&teacher_semaphores[(resource_id + 1) % 3]);

// Say what type of items we just put on the table
printf("resource %d giving out %s\n",resource_id, student_types[(resource_id + 2) % 3]);
}

return NULL;
}

/**
* The main thread handles the resource’s arbitration of items.
*/
int main(int argc, char* arvg[])
{
// Seed our random number since we will be using random numbers
srand(time(NULL));

// There is only one resource semaphore since only one set of items may be on
// the table at any given time. A values of 1 = nothing on the table
sem_init(&resource_ready, 0, 1);

// Initalize the teacher lock semaphore
sem_init(&teacher_lock, 0, 1);

// Initialize the semaphores for the students and teacher
for (int i = 0; i < 3; ++i)
{
sem_init(&student_semaphors[i], 0, 0);
sem_init(&teacher_semaphores[i], 0, 0);
}

// student ID’s will be passed to the threads. Allocate the ID’s on the stack
int student_ids[3];

pthread_t student_threads[3];

// Create the 3 student threads with IDs
for (int i = 0; i < 3; ++i)
{
student_ids[i] = i;

if (pthread_create(&student_threads[i], NULL, student, &student_ids[i]) == EAGAIN)
{
perror("Insufficient resources to create thread");
return 0;
}
}

// teacher ID’s will be passed to the threads. Allocate the ID’s on the stack
int teacher_ids[3];

pthread_t teacher_threads[3];

for (int i = 0; i < 3; ++i)
{
teacher_ids[i] = i;

if (pthread_create(&teacher_threads[i], NULL, teacher, &teacher_ids[i]) == EAGAIN)
{
perror("Insufficient resources to create thread");
return 0;
}
}

// resource ID’s will be passed to the threads. Allocate the ID’s on the stack
int resource_ids[3];

pthread_t resource_threads[3];

for (int i = 0; i < 3; ++i)
{
resource_ids[i] =i;

if (pthread_create(&resource_threads[i], NULL, resource, &resource_ids[i]) == EAGAIN)
{
perror("Insufficient resources to create thread");
return 0;
}
}

// Make sure all the students are done assignment
for (int i = 0; i < 3; ++i)
{
pthread_join(student_threads[i], NULL);
}

return 0;
}
